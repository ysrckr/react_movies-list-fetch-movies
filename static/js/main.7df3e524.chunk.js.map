{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","api.ts","hooks/useMovie.ts","components/FindMovie/FindMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","getMovie","query","fetch","then","res","json","catch","Response","Error","isMovieData","data","undefined","Title","FindMovie","onAdd","isMovieExists","useState","searchValue","setSearchValue","setQuery","movieData","setMovieData","isLoading","setIsLoading","isError","setIsError","Plot","poster","Poster","imdbID","movieDataToMovie","fetchData","a","useEffect","length","clearError","clearMovie","useMovie","isMovie","onSubmit","event","preventDefault","htmlFor","type","id","placeholder","value","onChange","target","onSearchChange","autoComplete","cn","disabled","onClick","App","setMovies","useCallback","some","film","ReactDOM","render","document","getElementById"],"mappings":"+TAQaA,EAA6B,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACxC,sBAAKC,UAAU,OAAO,UAAQ,YAA9B,UACE,qBAAKA,UAAU,aAAf,SACE,wBAAQA,UAAU,gBAAlB,SACE,qBACE,UAAQ,cACRC,IAAKF,EAAMG,OACXC,IAAI,kBAIV,sBAAKH,UAAU,eAAf,UACE,sBAAKA,UAAU,QAAf,UACE,qBAAKA,UAAU,aAAf,SACE,wBAAQA,UAAU,iBAAlB,SACE,qBACEC,IAAI,wBACJE,IAAI,aAIV,qBAAKH,UAAU,gBAAf,SACE,mBAAGA,UAAU,aAAa,UAAQ,aAAlC,SAAgDD,EAAMK,aAI1D,sBAAKJ,UAAU,UAAU,UAAQ,mBAAjC,UACGD,EAAMM,YACP,uBACA,mBAAGC,KAAMP,EAAMQ,QAAS,UAAQ,WAAhC,4BC3BKC,EAA8B,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAH,OACzC,qBAAKT,UAAU,SAAf,SACGS,EAAOC,KAAI,SAAAX,GAAK,OACf,cAAC,EAAD,CAEEA,MAAOA,GADFA,EAAMY,c,+CCTZ,SAASC,EAASC,GACvB,OAAOC,MAAM,GAAD,OAHE,2CAGF,cAAiBD,IAC1BE,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBC,OAAM,iBAAO,CACZC,SAAU,QACVC,MAAO,uBCKb,IAAMC,EAAc,SAACC,GACnB,YAAqCC,IAA7BD,EAAmBE,OCJhBC,EAA6B,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,cAClD,EAAsCC,mBAAS,IAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KACA,EDwBsB,WACtB,MAA0BF,mBAAiB,IAA3C,mBAAOf,EAAP,KAAckB,EAAd,KACA,EAAkCH,mBAA2B,MAA7D,mBAAOI,EAAP,KAAkBC,EAAlB,KACA,EAAkCL,oBAAS,GAA3C,mBAAOM,EAAP,KAAkBC,EAAlB,KACA,EAA8BP,oBAAS,GAAvC,mBAAOQ,EAAP,KAAgBC,EAAhB,KAUMtC,EA1BwB,SAC9BiC,GAEA,MAAO,CACL5B,OAAgB,OAAT4B,QAAS,IAATA,OAAA,EAAAA,EAAWR,QAAS,GAC3BnB,aAAsB,OAAT2B,QAAS,IAATA,OAAA,EAAAA,EAAWM,OAAQ,GAChCpC,QAViBqC,GAUY,OAATP,QAAS,IAATA,OAAA,EAAAA,EAAWQ,SAAU,GATzB,QAAXD,EAAmBA,EAHxB,6DAaAhC,QAAQ,8BAAD,cAAgCyB,QAAhC,IAAgCA,OAAhC,EAAgCA,EAAWS,QAClD9B,QAAiB,OAATqB,QAAS,IAATA,OAAA,EAAAA,EAAWS,SAAU,IAZb,IAACF,EA8BLG,CAAiBV,GAEzBW,EAAS,uCAAG,4BAAAC,EAAA,6DAChBP,GAAW,GACXF,GAAa,GAFG,kBAKKvB,EAASC,GALd,OAKRS,EALQ,OAOVD,EAAYC,GACdW,EAAaX,GAEbe,GAAW,GAVC,gDAadA,GAAW,GAbG,yBAedF,GAAa,GAfC,4EAAH,qDA2Bf,OARAU,qBAAU,WACa,IAAjBhC,EAAMiC,QAIVH,MACC,CAAC9B,IAEG,CACLd,QACAmC,YACAE,UACAL,WACAgB,WA1CiB,WACjBV,GAAW,IA0CXW,WAvCiB,WACjBf,EAAa,QC5BXgB,GANFlD,EADF,EACEA,MACAmC,EAFF,EAEEA,UACAE,EAHF,EAGEA,QACAL,EAJF,EAIEA,SACAgB,EALF,EAKEA,WACAC,EANF,EAMEA,WAGIE,EAA0B,KAAhBnD,EAAMK,MAqBtB,OACE,qCACE,uBAAMJ,UAAU,aAAamD,SAAU,SAACC,GAAD,OArB1B,SAACA,GAChBA,EAAMC,iBACNtB,EAASF,GACTC,EAAe,IAkBqCqB,CAASC,IAA3D,UACE,sBAAKpD,UAAU,QAAf,UACE,uBAAOA,UAAU,QAAQsD,QAAQ,cAAjC,yBAIA,qBAAKtD,UAAU,UAAf,SACE,uBACE,UAAQ,aACRuD,KAAK,OACLC,GAAG,cACHC,YAAY,0BACZzD,UAAU,kBACV0D,MAAO7B,EACP8B,SAAU,SAACP,GAAD,OA7BC,SAACA,GACtBtB,EAAesB,EAAMQ,OAAOF,OAC5BX,IA2B+Bc,CAAeT,IACpCU,aAAa,UAIhB1B,GACC,mBAAGpC,UAAU,iBAAiB,UAAQ,eAAtC,qDAMJ,sBAAKA,UAAU,mBAAf,UACE,qBAAKA,UAAU,UAAf,SACE,wBACE,UAAQ,eACRuD,KAAK,SACLvD,UAAW+D,IAAG,kBAAmB,CAC/B,aAAc7B,IAEhB8B,SAA0B,KAAhBnC,EANZ,4BAYDqB,GACC,qBAAKlD,UAAU,UAAf,SACE,wBACE,UAAQ,YACRuD,KAAK,SACLvD,UAAU,oBACViE,QAxDK,WACZtC,EAAc5B,IACjB2B,EAAM3B,GAGRiD,KA+CU,qCAaPE,GACC,sBAAKlD,UAAU,YAAY,UAAQ,mBAAnC,UACE,oBAAIA,UAAU,QAAd,qBACA,cAAC,EAAD,CAAWD,MAAOA,WClGfmE,EAAM,WACjB,MAA4BtC,mBAAkB,IAA9C,mBAAOnB,EAAP,KAAe0D,EAAf,KAEMxC,EAAgByC,uBAAY,SAACrE,GACjC,OAAOU,EAAO4D,MAAK,SAAAC,GAAI,OAAIA,EAAK3D,SAAWZ,EAAMY,YAChD,CAACF,IAMJ,OACE,sBAAKT,UAAU,OAAf,UACE,qBAAKA,UAAU,eAAf,SACE,cAAC,EAAD,CAAYS,OAAQA,MAGtB,qBAAKT,UAAU,UAAf,SACE,cAAC,EAAD,CACE0B,MAZM,SAAC3B,GACboE,EAAU,GAAD,mBAAK1D,GAAL,CAAaV,MAYhB4B,cAAeA,UCtBzB4C,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.7df3e524.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movieCard\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          data-cy=\"moviePoster\"\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\" data-cy=\"movieTitle\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\" data-cy=\"movieDescription\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl} data-cy=\"movieURL\">\n          IMDB\n        </a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  movies: Movie[];\n};\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import { MovieData } from './types/MovieData';\nimport { ResponseError } from './types/ReponseError';\n\nconst API_URL = 'https://www.omdbapi.com/?apikey=4a3b711b';\n\nexport function getMovie(query: string): Promise<MovieData | ResponseError> {\n  return fetch(`${API_URL}&t=${query}`)\n    .then((res) => res.json())\n    .catch(() => ({\n      Response: 'False',\n      Error: 'unexpected error',\n    }));\n}\n","import { useEffect, useState } from 'react';\nimport type { MovieData } from '../types/MovieData';\nimport type { ResponseError } from '../types/ReponseError';\nimport { getMovie } from '../api';\nimport { Movie } from '../types/Movie';\n\nexport interface UseMovie {\n  movie: Movie;\n  isLoading: boolean;\n  isError: boolean;\n  setQuery: (query: string) => void;\n  clearError: () => void;\n  clearMovie: () => void;\n}\n\nconst isMovieData = (data: MovieData | ResponseError): data is MovieData => {\n  return (data as MovieData).Title !== undefined;\n};\n\nconst posterPlaceholder\n  = 'https://via.placeholder.com/360x270.png?text=no%20preview';\n\nconst moviePoster = (poster: string): string => {\n  return poster !== 'N/A' ? poster : posterPlaceholder;\n};\n\nexport const movieDataToMovie = (\n  movieData: MovieData | null,\n): Movie => {\n  return {\n    title: movieData?.Title || '',\n    description: movieData?.Plot || '',\n    imgUrl: moviePoster(movieData?.Poster || ''),\n    imdbUrl: `https://www.imdb.com/title/${movieData?.imdbID}`,\n    imdbId: movieData?.imdbID || '',\n  };\n};\n\nexport const useMovie = (): UseMovie => {\n  const [query, setQuery] = useState<string>('');\n  const [movieData, setMovieData] = useState<MovieData | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n\n  const clearError = () => {\n    setIsError(false);\n  };\n\n  const clearMovie = () => {\n    setMovieData(null);\n  };\n\n  const movie = movieDataToMovie(movieData);\n\n  const fetchData = async () => {\n    setIsError(false);\n    setIsLoading(true);\n\n    try {\n      const data = await getMovie(query);\n\n      if (isMovieData(data)) {\n        setMovieData(data);\n      } else {\n        setIsError(true);\n      }\n    } catch (error) {\n      setIsError(true);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    if (query.length === 0) {\n      return;\n    }\n\n    fetchData();\n  }, [query]);\n\n  return {\n    movie,\n    isLoading,\n    isError,\n    setQuery,\n    clearError,\n    clearMovie,\n  };\n};\n","import { useState } from 'react';\nimport './FindMovie.scss';\nimport cn from 'classnames';\nimport { useMovie } from '../../hooks/useMovie';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  onAdd: (movie: Movie) => void;\n  isMovieExists: (movie: Movie) => boolean;\n};\n\nexport const FindMovie: React.FC<Props> = ({ onAdd, isMovieExists }) => {\n  const [searchValue, setSearchValue] = useState('');\n  const {\n    movie,\n    isLoading,\n    isError,\n    setQuery,\n    clearError,\n    clearMovie,\n  } = useMovie();\n\n  const isMovie = movie.title !== '';\n\n  const onSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    setQuery(searchValue);\n    setSearchValue('');\n  };\n\n  const onSearchChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchValue(event.target.value);\n    clearError();\n  };\n\n  const onAddMovie = () => {\n    if (!isMovieExists(movie)) {\n      onAdd(movie);\n    }\n\n    clearMovie();\n  };\n\n  return (\n    <>\n      <form className=\"find-movie\" onSubmit={(event) => onSubmit(event)}>\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              data-cy=\"titleField\"\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className=\"input is-dander\"\n              value={searchValue}\n              onChange={(event) => onSearchChange(event)}\n              autoComplete=\"off\"\n            />\n          </div>\n\n          {isError && (\n            <p className=\"help is-danger\" data-cy=\"errorMessage\">\n              Can&apos;t find a movie with such a title\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              data-cy=\"searchButton\"\n              type=\"submit\"\n              className={cn('button is-light', {\n                'is-loading': isLoading,\n              })}\n              disabled={searchValue === ''}\n            >\n              Find a movie\n            </button>\n          </div>\n\n          {isMovie && (\n            <div className=\"control\">\n              <button\n                data-cy=\"addButton\"\n                type=\"button\"\n                className=\"button is-primary\"\n                onClick={onAddMovie}\n              >\n                Add to the list\n              </button>\n            </div>\n          )}\n        </div>\n      </form>\n\n      {isMovie && (\n        <div className=\"container\" data-cy=\"previewContainer\">\n          <h2 className=\"title\">Preview</h2>\n          <MovieCard movie={movie} />\n        </div>\n      )}\n    </>\n  );\n};\n","import { useCallback, useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState<Movie[]>([]);\n\n  const isMovieExists = useCallback((movie: Movie) => {\n    return movies.some(film => film.imdbId === movie.imdbId);\n  }, [movies]);\n\n  const onAdd = (movie: Movie) => {\n    setMovies([...movies, movie]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n\n      <div className=\"sidebar\">\n        <FindMovie\n          onAdd={onAdd}\n          isMovieExists={isMovieExists}\n        />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}